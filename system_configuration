#!/bin/bash

# Function to print error messages and exit the script
print_error() {
  echo "[AutoConfig Error] $1" >&2
  exit 1
}

# Function to check if a package is installed
is_package_installed() {
  dpkg -s "$1" >/dev/null 2>&1
}


# Function to add or update a line in a file
add_or_update_line() {
  local line_number=$(grep -n "$1" "$2" | cut -d ":" -f 1)
  if [ -n "$line_number" ]; then
    sed -i "${line_number}s/.*/$1/" "$2"
  else
    echo "$1" >>"$2"
  fi
}


# Function to configure network settings
configure_network() {
  local interface=$1
  local address="192.168.16.21/24"
  local gateway="192.168.16.1"
  local dns_server="192.168.16.1"
  local dns_search_domains="home.arpa localdomain"
  
  # Check if the interface configuration needs to be updated
  local current_address=$(ip -o -4 addr show dev "$interface" | awk '{print $4}')
  if [ "$current_address" != "$address" ]; then
    echo "Updating network configuration for $interface..."
    # Apply the changes to the running system. Here the configration needed is applied and dev is used to specify the device
    ip addr replace "$address" dev "$interface" || print_error "Failed to set IP address"
    ip route replace default via "$gateway" || print_error "Failed to set gateway"
    echo "nameserver $dns_server" >/etc/resolv.conf || print_error "Failed to set DNS server"
    add_or_update_line "search $dns_search_domains" /etc/resolv.conf || print_error "Failed to set DNS search domains"
  else
    echo "Network configuration for $interface is up to date."
  fi
}


# Function to install or update packages
install_or_update_package() {
  local package=$1
  if ! is_package_installed "$package"; then
    echo "Installing $package..."
    apt-get -qq install "$package" || print_error "Failed to install $package"
  else
    echo "$package is already installed."
  fi
}

# Function to configure SSH server
configure_ssh() {
  # Disable password authentication
  add_or_update_line "PasswordAuthentication no" /etc/ssh/sshd_config
  # Enable key-based authentication
  add_or_update_line "PubkeyAuthentication yes" /etc/ssh/sshd_config
  systemctl restart ssh
  echo "SSH server configuration updated."
}

# Function to configure Apache web server
configure_apache() {
  # Update Apache ports.conf file
  add_or_update_line "Listen 80" /etc/apache2/ports.conf
  add_or_update_line "Listen 443" /etc/apache2/ports.conf
  systemctl restart apache2
  echo "Apache web server configuration updated."
}

# Function to configure Squid web proxy
configure_squid() {
  # Update Squid configuration file
  add_or_update_line "http_port 3128" /etc/squid/squid.conf
  systemctl restart squid
  echo "Squid web proxy configuration updated."
}

# Function to configure firewall rules with UFW
configure_firewall() {
  # Allow SSH
  ufw allow 22 >/dev/null
  # Allow HTTP
  ufw allow 80 >/dev/null
  # Allow HTTPS
  ufw allow 443 >/dev/null
  # Allow web proxy
  ufw allow 3128 >/dev/null
  # Enable firewall
  ufw --force enable >/dev/null
  echo "Firewall configuration updated with UFW."
}

# Function to create user accounts
create_user_accounts() {
  local users=("dennis" "aubrey" "captain" "snibbles" "brownie" "scooter" "sandy" "perrier" "cindy" "tiger" "yoda")
  
  for user in "${users[@]}"; do
    # Create the user if it doesn't exist
    id "$user" >/dev/null 2>&1 || useradd -m "$user"
    # Set the user's shell to bash
    usermod -s /bin/bash "$user"
    # Generate SSH keys for rsa and ed25519 algorithms
    su - "$user" -c "ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ''"
    su - "$user" -c "ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -q -N ''"
    # Add the generated public keys to authorized_keys
    cat /home/"$user"/.ssh/id_rsa.pub >>/home/"$user"/.ssh/authorized_keys
    cat /home/"$user"/.ssh/id_ed25519.pub >>/home/"$user"/.ssh/authorized_keys
    # Set appropriate permissions for the user's directory
    chmod 700 /home/"$user"/.ssh
    chmod 600 /home/"$user"/.ssh/authorized_keys
  done
  
  # Grant sudo access to the 'dennis' user
  add_or_update_line "dennis ALL=(ALL:ALL) ALL" /etc/sudoers.d/dennis
  echo "User accounts created and configured."
}



# Main Script 

# Check if running with root privileges. This checks the EUID (Effective User ID) is 0. If not, it calls the function print_error and displays the required error message 

if [ "$EUID" -ne 0 ]; then
  print_error "This script must be run with root privileges."
fi



# Check if the current hostname is already "autosrv" and if it is already "autosrv" inform the user that no changes are needed. If not, change the hostname. If the hostname setting fails, print an appropriate error message for the user. 

if [ "$(hostnamectl --static)" == "autosrv" ]; then
  echo "Hostname is already set to 'autosrv'. No changes needed."
else
  echo "Setting hostname to 'autosrv'..."
  hostnamectl set-hostname autosrv || print_error "Failed to set hostname"
  echo "Hostname has been changed to 'autosrv'."
fi

# Configure network
configure_network "ens34"

# Install or update packages
echo "Checking and installing required packages..."
install_or_update_package "openssh-server"
install_or_update_package "apache2"
install_or_update_package "squid"
install_or_update_package "ufw"

# Configure SSH server
configure_ssh

# Configure Apache web server
configure_apache

# Configure Squid web proxy
configure_squid

# Configure firewall with UFW
configure_firewall

# Create user accounts
create_user_accounts

# Script execution completed
echo "System configuration completed successfully."

